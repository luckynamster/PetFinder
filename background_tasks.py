from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from datetime import datetime, timedelta
import sqlite3
from typing import List, Tuple
from aiogram import Bot
from aiogram.types import InlineKeyboardButton

from image_comparison import ImageComparator



class BackgroundProcessor:
    def __init__(self, bot: Bot, db_path: str = "database.db"):
        self.bot = bot
        self.db_path = db_path
        self.scheduler = AsyncIOScheduler()
        self.comparator = ImageComparator(db_path)
        self.NOTIFICATION_THRESHOLD = 0.85  # –ü–æ—Ä–æ–≥ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        self.scheduler.add_job(
            self.process_all_requests,
            trigger=IntervalTrigger(minutes=1),
            next_run_time=datetime.now() + timedelta(seconds=1)
        )
        self.scheduler.start()


    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏"""
        self.scheduler.shutdown()

    async def process_all_requests(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""


        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id FROM requests 
                WHERE is_active = 1 
                AND created_at > datetime('now', '-30 days')
            """)
            request_ids = [row[0] for row in cursor.fetchall()]
            conn.close()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
            for request_id in request_ids:
                await self.process_single_request(request_id)


        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

    async def process_single_request(self, request_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
            results = self.comparator.compare_with_database(request_id)

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –ø–æ—Ä–æ–≥—É
            filtered = [(rid, score) for rid, score in results if score >= self.NOTIFICATION_THRESHOLD]

            if filtered:
                await self.notify_users(request_id, filtered)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ {request_id}: {str(e)}")

    async def notify_users(self, source_id: int, matches: List[Tuple[int, float]]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
            cursor.execute("""
                SELECT user_id, request_type FROM requests 
                WHERE id = ?
            """, (source_id,))
            source_user_id, source_type = cursor.fetchone()

            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            for match_id, similarity in matches:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                cursor.execute("""
                    SELECT 1 FROM notifications 
                    WHERE source_request = ? AND matched_request = ?
                """, (source_id, match_id))
                if cursor.fetchone():
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
                cursor.execute("""
                    SELECT user_id FROM requests 
                    WHERE id = ?
                """, (match_id,))
                match_user_id = cursor.fetchone()[0]

                # –ü–æ–ª—É—á–∞–µ–º chat_id –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute("SELECT chat_id FROM users WHERE id = ?", (source_user_id,))
                source_chat_id = cursor.fetchone()[0]

                cursor.execute("SELECT chat_id FROM users WHERE id = ?", (match_user_id,))
                match_chat_id = cursor.fetchone()[0]

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                message_text = (
                    "üîî –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!\n\n"
                    f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {similarity:.2%}\n"
                    "–•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?"
                )

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
                source_kb = self._create_notification_kb(match_user_id)
                match_kb = self._create_notification_kb(source_user_id)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
                if not self.has_sent_notification(source_user_id, match_user_id):
                    await self.bot.send_message(
                        chat_id=source_chat_id,
                        text=message_text,
                        reply_markup=source_kb
                    )

                    await self.bot.send_message(
                        chat_id=match_chat_id,
                        text=message_text,
                        reply_markup=match_kb
                    )

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    cursor.execute("""
                        INSERT INTO notifications 
                        (source_request, matched_request, similarity)
                        VALUES (?, ?, ?)
                    """, (source_id, match_id, similarity))

            conn.commit()

        finally:
            conn.close()

    def has_sent_notification(self, user_a: int, user_b: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        try:
            cursor.execute("""
                SELECT 1 FROM notifications 
                WHERE (source_request IN (?, ?) AND matched_request IN (?, ?))
            """, (user_a, user_b, user_a, user_b))
            return cursor.fetchone() is not None
        finally:
            conn.close()

    @staticmethod
    def _create_notification_kb(user_id: int):
        """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(  # –¢–µ–ø–µ—Ä—å –∫–ª–∞—Å—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è
                text="‚úÖ –î–∞, –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                callback_data=f"show_contacts_{user_id}"
            ),
            InlineKeyboardButton(  # –ò –∑–¥–µ—Å—å —Ç–æ–∂–µ
                text="‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ",
                callback_data="dismiss_notification"
            )
        )
        return builder.as_markup()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ –±–æ—Ç–∞
async def setup_background_tasks(bot: Bot):
    processor = BackgroundProcessor(bot)
    await processor.start()
    return processor
