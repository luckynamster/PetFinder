from aiogram import Bot, Router, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, FSInputFile, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
import sqlite3

import texts
from texts import CATEGORY_TEXT

rt = Router()


class Form(StatesGroup):
    request_type = State()
    photo = State()
    category = State()
    breed = State()
    gender = State()
    size = State()
    hair = State()
    city = State()
    chip_number = State()


def create_connection():
    return sqlite3.connect("database.db")


def cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel"
    ))
    return builder.as_markup()


def main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–Ø –ò–©–£ –ü–ò–¢–û–ú–¶–ê")],
            [types.KeyboardButton(text="–Ø –ù–ê–®–ï–õ –ü–ò–¢–û–ú–¶–ê")]
        ],

        resize_keyboard=True,

    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@rt.callback_query(F.data == "cancel")
async def cancel_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(texts.CANCEL, reply_markup=main_keyboard(), parse_mode="HTML")
    await callback.answer()


@rt.message(CommandStart())
async def cmd_start(message: Message):
    start_photo = FSInputFile("images/start_image.png")
    await message.answer_photo(
        start_photo,
        caption=texts.Start,
        reply_markup=main_keyboard(),
        parse_mode="HTML"
    )


@rt.message(F.text.in_(["–Ø –ò–©–£ –ü–ò–¢–û–ú–¶–ê", "–Ø –ù–ê–®–ï–õ –ü–ò–¢–û–ú–¶–ê"]))
async def handle_request_type(message: Message, state: FSMContext):
    if message.text == "–Ø –ò–©–£ –ü–ò–¢–û–ú–¶–ê":
        request_type = "lost"
        await message.answer(
            texts.FINDPET,
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode="HTML"
        )
    else:
        request_type = "found"
        await message.answer(
            texts.FOUNDPET,
            reply_markup=types.ReplyKeyboardRemove(),
            parse_mode="HTML"
        )

    await state.update_data(request_type=request_type)
    await state.set_state(Form.photo)

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É
@rt.message(Form.photo, F.photo)
async def handle_photo(message: Message, state: FSMContext, bot: Bot):
    try:
        photo = message.photo[-1]
        file = await bot.get_file(photo.file_id)
        photo_data = await bot.download_file(file.file_path)

        await state.update_data(photo_data=photo_data.read())
        await state.set_state(Form.category)

        await message.answer(
            "üêæ –í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–ø—É–≥–∞–π, —Ö–æ–º—è–∫, –∫–æ—à–∫–∞):",
            reply_markup=cancel_keyboard()
        )

    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=cancel_keyboard())
        await state.clear()

@rt.message(Form.photo)
async def handle_not_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer(texts.NOT_PHOTO,
            reply_markup=cancel_keyboard(),
            parse_mode="HTML"
        )
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
@rt.message(Form.category)
async def handle_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(Form.breed)
    await message.answer(
        CATEGORY_TEXT,
        reply_markup=cancel_keyboard()
    )

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä–æ–¥—ã
@rt.message(Form.breed)
async def handle_breed(message: Message, state: FSMContext):
    await state.update_data(breed=message.text)
    await state.set_state(Form.gender)

    # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="–°–∞–º–µ—Ü", callback_data="male"),
        types.InlineKeyboardButton(text="–°–∞–º–∫–∞", callback_data="female"),
        types.InlineKeyboardButton(text="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", callback_data="unknown")
    )
    builder.adjust(2)
    await message.answer(
        "üöª –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:",
        reply_markup=builder.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@rt.callback_query(Form.gender, F.data.in_(["male", "female", "unknown"]))
async def handle_gender(callback: CallbackQuery, state: FSMContext):
    gender_map = {
        "male": "—Å–∞–º–µ—Ü",
        "female": "—Å–∞–º–∫–∞",
        "unknown": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    }
    await state.update_data(gender=gender_map[callback.data])
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.delete()
    await state.set_state(Form.size)

    # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞
    size_builder = InlineKeyboardBuilder()
    size_builder.add(
        types.InlineKeyboardButton(text="–ú–∞–ª–µ–Ω—å–∫–∏–π", callback_data="small"),
        types.InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–∏–π", callback_data="medium"),
        types.InlineKeyboardButton(text="–ë–æ–ª—å—à–æ–π", callback_data="large")
    )
    size_builder.adjust(2)

    await callback.message.answer(
        texts.SIZE_TEXT,
        reply_markup=size_builder.as_markup()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
@rt.callback_query(Form.size, F.data.in_(["small", "medium", "large"]))
async def handle_size(callback: CallbackQuery, state: FSMContext):
    size_map = {
        "small": "–º–∞–ª–µ–Ω—å–∫–∏–π",
        "medium": "—Å—Ä–µ–¥–Ω–∏–π",
        "large": "–±–æ–ª—å—à–æ–π"
    }
    await state.update_data(size=size_map[callback.data])
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.delete()
    await state.set_state(Form.hair)

    # Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–µ—Ä—Å—Ç–∏
    hair_builder = InlineKeyboardBuilder()
    hair_builder.add(
        types.InlineKeyboardButton(text="–ö–æ—Ä–æ—Ç–∫–∞—è", callback_data="short"),
        types.InlineKeyboardButton(text="–î–ª–∏–Ω–Ω–∞—è", callback_data="long"),
        types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="none")
    )
    hair_builder.adjust(2)

    await callback.message.answer(
        texts.FUR_TEXT,
        reply_markup=hair_builder.as_markup()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —à–µ—Ä—Å—Ç–∏
@rt.callback_query(Form.hair, F.data.in_(["short", "long", "none"]))
async def handle_hair(callback: CallbackQuery, state: FSMContext):
    hair_map = {
        "short": "–∫–æ—Ä–æ—Ç–∫–∞—è",
        "long": "–¥–ª–∏–Ω–Ω–∞—è",
        "none": "–Ω–µ—Ç"
    }
    await state.update_data(hair=hair_map[callback.data])
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.delete()
    await state.set_state(Form.city)
    await callback.message.answer(
        texts.CITY_TEXT,
        reply_markup=cancel_keyboard()
    )
    await callback.answer()

#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä–æ–¥–∞
@rt.message(Form.city)
async def handle_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Form.chip_number)
    await message.answer(
        texts.CHIP_TEXT,
        reply_markup=cancel_keyboard()
    )

#–ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º—ã –¥–µ–ª–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@rt.message(Form.chip_number, Command("skip"))
@rt.message(Form.chip_number)
async def handle_chip_number(message: Message, state: FSMContext):
    chip_number = message.text if message.text != "/skip" else None
    await state.update_data(chip_number=chip_number)

    data = await state.get_data()
    conn = create_connection()

    try:
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO users (chat_id) VALUES (?)", (message.from_user.id,))
        cursor.execute("SELECT id FROM users WHERE chat_id = ?", (message.from_user.id,))
        user_id = cursor.fetchone()[0]

        cursor.execute('''
            INSERT INTO requests (
                user_id, request_type, photo_data, category, breed,
                gender, size, hair, city, chip_number
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id,
            data['request_type'],
            data['photo_data'],
            data.get('category'),
            data.get('breed'),
            data.get('gender'),
            data.get('size'),
            data.get('hair'),
            data.get('city'),
            chip_number
        ))

        conn.commit()
        await message.answer(texts.SUCCESS, reply_markup=main_keyboard())
        #–ó–ê–ü–ò–°–´–í–ê–ï–ú –í –ë–î –ï–°–õ–ò –ù–ï–¢ –û–®–ò–ë–û–ö, –ê –ï–°–õ–ò –ï–°–¢–¨ –¢–û –í–´–í–û–î–ò–ú –í –ß–ê–¢ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
    except sqlite3.Error as e:

        await message.answer(f"{texts.ERROR}{str(e)}", reply_markup=cancel_keyboard())

    finally:
        conn.close()
        await state.clear()
